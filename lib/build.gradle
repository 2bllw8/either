/*
 * Copyright (c) 2021 2bllw8
 * SPDX-License-Identifier: Apache-2.0
 */
plugins {
    id("java-library")
    id("maven-publish")
    id("pmd")
    id("signing")
}

group = "exe.bbllw8"
version = "3.4.0"

repositories {
    mavenCentral()
}

dependencies {
    testImplementation(libs.junit)
}

java {
    withJavadocJar()
    withSourcesJar()

    toolchain.languageVersion.set(JavaLanguageVersion.of(8))
}

javadoc {
    options.memberLevel = JavadocMemberLevel.PUBLIC
    options.addStringOption("Xdoclint:all,-missing", "-quiet")
    options.addBooleanOption("html5", true)

    configure(options) {
        tags(
                "apiNote:a:API Note:",
                "implSpec:a:Implementation Requirements:",
                "implNote:a:Implementation Note:",
        )
    }
}

compileJava {
    options.compilerArgs << "-Xlint:all,-serial"
}

jar {
    manifest {
        attributes(
                'Implementation-Title': rootProject.name,
                'Implementation-Version': project.version,
        )
    }
}

tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

def localProps = new Properties()
def localPropsFile = project.rootProject.file("local.properties")
if (localPropsFile.exists()) {
    localProps.load localPropsFile.newDataInputStream()
}

pmd {
    consoleOutput = true
    toolVersion = "6.41.0"
    ruleSets = [
            "category/java/errorprone.xml",
            "category/java/bestpractices.xml",
    ]
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = localProps.getProperty("repo.github.url", "")
            credentials {
                username = localProps.getProperty("repo.github.username", "")
                password = localProps.getProperty("repo.github.token", "")
            }
        }

        maven {
            name = "Central"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = localProps.getProperty("repo.central.username", "")
                password = localProps.getProperty("repo.central.password", "")
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            artifactId = rootProject.name
            groupId = "io.github.2bllw8"
            setVersion(project.version)

            from(components.java)
            versionMapping {
                usage("java-api") {
                    fromResolutionOf("runtimeClasspath")
                }
                usage("java-runtime") {
                    fromResolutionResult()
                }
            }
            pom {
                name = "Either"
                description = "Implementation of the Either and Try types for Java 21+"
                url = "https://github.com/2bllw8/either"
                developers {
                    developer {
                        name = "2bllw8"
                    }
                }
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                scm {
                    connection = "scm:git:git://github.com/2bllw8/either.git"
                    developerConnection = "scm:git:git://github.com/2bllw8/either.git"
                    url = "https://github.com/2bllw8/either/tree/main"
                }
            }
        }
    }
}

signing {
    def signingKeyPath = localProps.getProperty("signing.secretKeyFile", "")
    if (signingKeyPath == "") {
        required { false }
    } else {
        required { true }

        def signingPassword = localProps.getProperty("signing.password", "")
        def signingKeyFile = file("${rootProject.rootDir.absolutePath}${File.separator}${signingKeyPath}")

        if (signingKeyFile.exists()) {
            useInMemoryPgpKeys(signingKeyFile.text, signingPassword)
        }
    }
    sign publishing.publications.mavenJava
}
